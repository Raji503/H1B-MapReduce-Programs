import java.io.*;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;


public class h1b7 {
   
    public static class MapClass extends Mapper<LongWritable,Text,IntWritable,LongWritable>
       {
          public void map(LongWritable key, Text value, Context context)
          {             
             try{
                String[] str = value.toString().split("\t");     
              
                int year = Integer.parseInt(str[7].trim());
                long s_no = Long.parseLong(str[0].trim());
                context.write(new IntWritable(year),new LongWritable(s_no));
             }
             catch(Exception e)
             {
                System.out.println(e.getMessage());
             }
          }
       }
   
      public static class ReduceClass extends Reducer<IntWritable,LongWritable,IntWritable,LongWritable>
       {
            private LongWritable result = new LongWritable();
           
            public void reduce(IntWritable key, Iterable<LongWritable> values,Context context) throws IOException, InterruptedException 
            {
              long count = 0;
              long sum=0;
               
                 for (LongWritable val : values)
                 {          
                    sum = sum + val.get();
                    count++;
                 }
                
              result.set(count);             
              context.write(key, result);
              //context.write(key, new LongWritable(sum));
             
            }
       }
      public static void main(String[] args) throws Exception {
            Configuration conf = new Configuration();
            //conf.set("name", "value")
            //conf.set("mapreduce.input.fileinputformat.split.minsize", "134217728");
            Job job = Job.getInstance(conf, "count by year");
            job.setJarByClass(h1b7.class);
            job.setMapperClass(MapClass.class);
            //job.setCombinerClass(ReduceClass.class);
            job.setReducerClass(ReduceClass.class);
            //job.setNumReduceTasks(0);
            job.setOutputKeyClass(IntWritable.class);
            job.setOutputValueClass(LongWritable.class);
            FileInputFormat.addInputPath(job, new Path(args[0]));
            FileOutputFormat.setOutputPath(job, new Path(args[1]));
            System.exit(job.waitForCompletion(true) ? 0 : 1);
          }
}

